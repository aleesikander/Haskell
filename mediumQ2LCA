data Tree a = Nil | TreeNode (Tree a) a (Tree a) deriving (Show, Eq)

-- A simple function to find the lowest common ancestor in a BST.
commonAncestor :: (Ord a) => Tree a -> a -> a -> Maybe a
commonAncestor Nil _ _ = Nothing
commonAncestor (TreeNode left value right) p q
    | max p q < value = commonAncestor left p q
    | min p q > value = commonAncestor right p q
    | otherwise = Just value

-- Main function to run the test cases
main :: IO ()
main = do
    -- Test when both nodes are not present in the tree.
    putStrLn "Test 1: "
    print $ commonAncestor Nil 1 2 -- Should be Nothing

    -- Test with a simple tree where nodes 1 and 3 have 2 as their LCA.
    let tree2 = TreeNode (TreeNode Nil 1 Nil) 2 (TreeNode Nil 3 Nil)
    putStrLn "Test 2: "
    print $ commonAncestor tree2 1 3 -- Should be Just 2

    -- Test when one of the nodes is not present in the tree.
    putStrLn "Test 3: "
    print $ commonAncestor tree2 1 4 -- Should be Nothing

    -- More complex tree for additional test cases.
    let tree4 = TreeNode (TreeNode (TreeNode Nil 1 Nil) 3 (TreeNode Nil 6 Nil)) 4 (TreeNode (TreeNode Nil 5 Nil) 2 (TreeNode Nil 7 Nil))
    putStrLn "Test 4: "
    print $ commonAncestor tree4 1 7 -- Should be Just 4

    putStrLn "Test 5: "
    print $ commonAncestor tree4 2 7 -- Should be Just 2

    putStrLn "Test 6: "
    print $ commonAncestor tree4 1 3 -- Should be Just 3

