-- Function to calculate trapped water
waterCollection :: [Int] -> Int
waterCollection heights = sum $ zipWith min maxL maxR `zipWith` subtract heights
  where
    maxL = scanl1 max heights -- Maximum from the left
    maxR = scanr1 max heights -- Maximum from the right

-- Main function to run the test cases
main :: IO ()
main = do
    putStrLn "Test 1: "
    print $ waterCollection [0,1,0,2,1,0,1,3,2,1,2,1] -- Expected output: 12
    
    putStrLn "Test 2: "
    print $ waterCollection [4,2,0,3,2,5] -- Expected output: 9
    
    putStrLn "Test 3: "
    print $ waterCollection [1,2,3,4,5] -- Expected output: 0
    
    putStrLn "Test 4: "
    print $ waterCollection [5,4,3,2,1] -- Expected output: 0
    
    putStrLn "Test 5: "
    print $ waterCollection [5,4,3,2,1,2,3,4,5] -- Expected output: 25
